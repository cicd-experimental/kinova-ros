<launch>
  <arg name="kinova_robotType" default="j2s6s200"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>  
  <arg name="use_trajectory_controller" default="true"/>
  <arg name="standalone" default="true"/>
  <arg name="is7dof" default="false"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find kinova_control)/config/$(arg kinova_robotName)_control.yaml" command="load"/>
 
  <group unless="$(arg use_trajectory_controller)">
    <group unless="$(arg is7dof)">
      <!-- load the joint by joint position controllers -->  
      <node name="$(arg kinova_robotName)_joints_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" 
       args=" 
               $(arg kinova_robotName)/joint_1_position_controller $(arg kinova_robotName)/joint_2_position_controller  
               $(arg kinova_robotName)/joint_3_position_controller $(arg kinova_robotName)/joint_4_position_controller
               $(arg kinova_robotName)/joint_5_position_controller $(arg kinova_robotName)/joint_6_position_controller 
               $(arg kinova_robotName)/finger_2_position_controller $(arg kinova_robotName)/finger_1_position_controller 
               $(arg kinova_robotName)/finger_tip_1_position_controller $(arg kinova_robotName)/finger_tip_2_position_controller 
               $(arg kinova_robotName)/joint_state_controller"/> 
    </group>
    <group if="$(arg is7dof)">
      <!-- load the joint by joint position controllers -->  
      <node name="$(arg kinova_robotName)_joints_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen"
       args=" 
               $(arg kinova_robotName)/joint_1_position_controller $(arg kinova_robotName)/joint_2_position_controller  
               $(arg kinova_robotName)/joint_3_position_controller $(arg kinova_robotName)/joint_4_position_controller
               $(arg kinova_robotName)/joint_5_position_controller $(arg kinova_robotName)/joint_6_position_controller joint_7_position_controller
               $(arg kinova_robotName)/finger_2_position_controller $(arg kinova_robotName)/finger_1_position_controller 
               $(arg kinova_robotName)/finger_tip_1_position_controller $(arg kinova_robotName)/finger_tip_2_position_controller 
               $(arg kinova_robotName)/joint_state_controller"/> 
    </group>
  </group>

  <group if="$(arg use_trajectory_controller)">
    <group if="$(arg standalone)">
      <!-- Effort Joint trajectory controller-->
      <node name="$(arg kinova_robotName)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" 
        output="screen" 
        args="
        $(arg kinova_robotName)/effort_joint_trajectory_controller
        $(arg kinova_robotName)/effort_finger_trajectory_controller    
        $(arg kinova_robotName)/finger_tip_1_position_controller
        $(arg kinova_robotName)/finger_tip_2_position_controller 
        $(arg kinova_robotName)/joint_state_controller"/>    
    </group>
    <group unless="$(arg standalone)">
      <!-- Effort Joint trajectory controller-->
      <node name="$(arg kinova_robotName)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" 
        output="screen" 
        args="
        $(arg kinova_robotName)/effort_joint_trajectory_controller
        $(arg kinova_robotName)/effort_finger_trajectory_controller    
        $(arg kinova_robotName)/finger_tip_1_position_controller
        $(arg kinova_robotName)/finger_tip_2_position_controller"/>    
    </group>
  </group>

  <group if="$(arg standalone)">
    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
          respawn="false" output="screen">    
    </node>
  </group>
  
  <node name="command_robot_home_pose" pkg="kinova_control" type="move_robot.py"
        respawn="false" output="screen" args="$(arg kinova_robotType)">       
  </node>
 
</launch>
